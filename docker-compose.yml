services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_DB: test_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "test_user", "-d", "test_db" ]
      interval: 3s
      timeout: 3s
      retries: 5

  migrate:
    image: migrate/migrate:v4.17.0
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./pkg/db/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://test_user:test_pass@postgres:5432/test_db?sslmode=disable",
      "up"
    ]

  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    ports:
      - "9092:9092"
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 6

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=test_user
      - DB_PASSWORD=test_pass
      - DB_NAME=test_db
      - DB_SSLMODE=disable
    ports:
      - "8081:8081"
    restart: always

volumes:
  pgdata: